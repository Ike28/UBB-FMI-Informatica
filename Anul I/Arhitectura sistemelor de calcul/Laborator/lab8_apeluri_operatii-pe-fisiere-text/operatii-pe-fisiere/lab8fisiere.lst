     1                                  bits 32 
     2                                  global  start 
     3                                  
     4                                  extern  exit
     5                                  import  exit msvcrt.dll
     6                                  extern	fopen
     7                                  import	fopen msvcrt.dll
     8                                  extern  fread
     9                                  import 	fread msvcrt.dll
    10                                  extern 	fprintf
    11                                  import 	fprintf msvcrt.dll
    12                                  extern 	printf
    13                                  import	printf msvcrt.dll
    14                                  extern 	fclose
    15                                  import	fclose msvcrt.dll
    16                                  	; 29.
    17                                  	; Se da un fisier text.
    18                                  	; Fisierul contine numere (in baza 10) separate prin spatii.
    19                                  	; Sa se citeasca continutul acestui fisier,
    20                                  	; sa se determine maximul numerelor citite
    21                                  	; si sa se scrie rezultatul la sfarsitul fisierului.
    22                                  
    23                                  	; EXEMPLE:
    24                                  	;	! fisierul trebuie incheiat cu inca un caracter precum spatiu, deoarece fread nu va citi ultimul caracter
    25                                  	;	! rezolvarea se aplica numerelor intregi fara semn ce incap pe 32 biti (intervalul [0, 4294967295]),
    26                                  	;	  si separate in fisier prin spatiu
    27                                  	;	! in cazul in care nu exista numere in fisier, va rezulta scrierea valorii 0
    28                                  	;
    29                                  	; 1. 50 29 63 
    30                                  	;	 => 63
    31                                  	;
    32                                  	; 2. 817530917 580320933 903540007 832752132 654861577 731412330 742337256 
    33                                  	;	 => 903540007
    34                                  segment  data use32 class=data
    35                                  	; mesaje in caz de eroare la utilizarea functiilor sistem
    36 00000000 45726F617265206C61-     	eroare_deschidere db "Eroare la deschiderea fisierului",0
    36 00000009 206465736368696465-
    36 00000012 726561206669736965-
    36 0000001B 72756C756900       
    37 00000021 45726F617265206C61-     	eroare_citire db "Eroare la citirea din fisier",0
    37 0000002A 206369746972656120-
    37 00000033 64696E206669736965-
    37 0000003C 7200               
    38 0000003E 45726F617265206C61-     	eroare_scriere db "Eroare la scrierea in fisier",0
    38 00000047 207363726965726561-
    38 00000050 20696E206669736965-
    38 00000059 7200               
    39                                  
    40                                  	; descriptori pentru scrierea in fisier cu fprintf
    41 0000005B 256300                  	format_scriere_caracter db "%c",0
    42 0000005E 257500                  	format_scriere_numar db "%u",0
    43                                  
    44                                  	; locul unde vom salva identificatorul fisierului
    45 00000061 <res 00000004>          	identificator resd 1
    46                                  
    47                                  	; numele fisierului inclusiv terminatorul de extensie
    48 00000065 6C616238657832392E-     	nume_fisier db "lab8ex29.txt",0
    48 0000006E 74787400           
    49                                  
    50                                  	; descriptor pentru modul de deschidere a fisierului cu fopen
    51 00000072 612B00                  	mod_citire_adaugare db "a+",0
    52                                  
    53                                  	; datele problemei
    54 00000075 00<rept>                	continut_fisier times 41h db 0
    55 000000B6 <res 00000004>          	nr_curent resd 1
    56 000000BA 00000000                	nr_maxim dd 0h
    57                                  
    58                                  segment  code use32 class=code
    59                                  start:
    60                                  	; STRATEGIE
    61                                  	; 1. Deschidem fisierul pentru citire si scriere cu adaugare la final
    62                                  	;
    63                                  	; 2. Citim cate maxim 64 octeti pana cand am ajuns la finalul fisierului
    64                                  	;
    65                                  	; 3. Parcurgem de fiecare data octetii cititi si formam pe rand numerele din cifrele citite,
    66                                  	;	 memorand in permanenta valoarea maxima pana in prezent si actualizand-o, daca este necesar,
    67                                  	;	 la intalnirea unui spatiu (cand am terminat de format un numar)
    68                                  	;
    69                                  	; 4. Scriem (implicit la finalul fisierului) maximul, si inca un spatiu pentru consecventa in formatul datelor
    70                                  	;
    71                                  	; 5. Inchidem fisierul
    72                                  
    73 00000000 68[72000000]            	push mod_citire_adaugare
    74 00000005 68[65000000]            	push nume_fisier
    75 0000000A FF15[00000000]          	call [fopen] ; deschidem fisierul pentru citire si adaugare
    76 00000010 83C408                  	add esp, 4*2 ; eliberam parametrii procedurii fopen de pe stiva
    77 00000013 83F800                  	cmp eax, 0
    78 00000016 0F84D9000000            	je eroare_file
    79 0000001C A3[61000000]            	mov [identificator], eax ; salvam identificatorul fisierului in caz ca nu a intervenit o eroare
    80 00000021 C705[B6000000]0000-     	mov [nr_curent], dword 0
    80 00000029 0000               
    81                                  
    82                                  
    83                                  	citire_octeti:
    84 0000002B A1[61000000]            		mov eax, [identificator]
    85 00000030 50                      		push eax
    86 00000031 6A40                    		push dword 40h
    87 00000033 6A01                    		push dword 1h
    88 00000035 68[75000000]            		push continut_fisier
    89 0000003A FF15[00000000]          		call [fread] ; apelam fread, citind in continut_fisier octet cu octet, cu limita maxima de 64
    90 00000040 83C410                  		add esp, 4*4
    91                                  
    92 00000043 83F800                  		cmp eax, byte 0h ; verificam daca am ajuns la finalul fisierului,
    93                                  						 ; acesta fiind punctul de iesire din blocul repetitiv de parcurgere citire_octeti
    94 00000046 745C                    		je final_fisier
    95                                  
    96 00000048 89C1                    		mov ecx, eax ; in eax avem numarul de octeti cititi
    97 0000004A BE[75000000]            		mov esi, continut_fisier
    98 0000004F FC                      		cld
    99                                  		calcul_max_numere:
   100 00000050 AC                      			lodsb ; parcurgem octetii cititi
   101 00000051 3C20                    			cmp al, ' ' ; daca octetul e spatiu, avem un numar format complet
   102 00000053 741E                    			je final_numar
   103 00000055 2C30                    			sub al, '0'
   104 00000057 BB00000000              			mov ebx, 0
   105 0000005C 88C3                    			mov bl, al
   106 0000005E A1[B6000000]            			mov eax, [nr_curent]
   107 00000063 BA0A000000              			mov edx, 0Ah
   108 00000068 F7E2                    			mul edx
   109 0000006A 01D8                    			add eax, ebx ; altfel daca e caracter cifra, obtinem cifra
   110                                  						 ; si lipim cifra la numarul format
   111 0000006C A3[B6000000]            			mov [nr_curent], eax ; actualizam numarul format
   112 00000071 EB2D                    			jmp continuare
   113                                  
   114                                  			final_numar:
   115 00000073 A1[BA000000]            			mov eax, [nr_maxim]
   116 00000078 3905[B6000000]          			cmp [nr_curent], eax
   117 0000007E 770C                    			ja nou_maxim ; comparam numarul format cu maximul si actualizam maximul daca este nevoie
   118 00000080 C705[B6000000]0000-     			mov [nr_curent], dword 0 ; resetam pentru a forma urmatorul numar
   118 00000088 0000               
   119 0000008A EB14                    			jmp continuare
   120                                  
   121                                  			nou_maxim:
   122 0000008C A1[B6000000]            			mov eax, [nr_curent]
   123 00000091 A3[BA000000]            			mov [nr_maxim], eax
   124 00000096 C705[B6000000]0000-     			mov [nr_curent], dword 0 ; resetam pentru a forma urmatorul numar
   124 0000009E 0000               
   125                                  
   126                                  			continuare:
   127 000000A0 E2AE                    		loop calcul_max_numere
   128 000000A2 EB87                    	jmp citire_octeti
   129                                  
   130                                  	final_fisier:
   131 000000A4 A1[BA000000]            	mov eax, [nr_maxim]
   132 000000A9 50                      	push eax
   133 000000AA B8[5E000000]            	mov eax, format_scriere_numar
   134 000000AF 50                      	push eax
   135 000000B0 A1[61000000]            	mov eax, [identificator]
   136 000000B5 50                      	push eax
   137 000000B6 FF15[00000000]          	call [fprintf] ; scriem, cu fprintf, valoarea maxima la finalul fisierului,
   138                                  				   ; specificand format %u pentru intreg fara semn
   139 000000BC 83C40C                  	add esp, 4*3
   140 000000BF 83F800                  	cmp eax, 0
   141 000000C2 7C51                    	jl eroare_write ; fprintf va returna in eax o valoare negativa daca a intervenit o eroare
   142                                  
   143 000000C4 B820000000              	mov eax, ' '
   144 000000C9 50                      	push eax
   145 000000CA B8[5B000000]            	mov eax, format_scriere_caracter
   146 000000CF 50                      	push eax
   147 000000D0 A1[61000000]            	mov eax, [identificator]
   148 000000D5 50                      	push eax
   149 000000D6 FF15[00000000]          	call [fprintf] ; scriem si un spatiu la finalul fisierului,
   150                                  				   ; specificand format %c pentru caracter
   151 000000DC 83C40C                  	add esp, 4*3 ; eliberam parametrii procedurii fprintf de pe stiva
   152 000000DF 83F800                  	cmp eax, 0
   153 000000E2 7C31                    	jl eroare_write
   154                                  
   155 000000E4 A1[61000000]            	mov eax, [identificator]
   156 000000E9 50                      	push eax
   157 000000EA FF15[00000000]          	call [fclose] ; inchidem fisierul cu fclose folosind identificatorul
   158 000000F0 83C404                  	add esp, 4
   159 000000F3 EB2E                    	jmp final
   160                                  
   161                                  	; scriem mesaje de eroare corespunzatoare la iesirea standard (consola) daca este nevoie
   162                                  	eroare_file:
   163 000000F5 68[00000000]            	push eroare_deschidere
   164 000000FA FF15[00000000]          	call [printf]
   165 00000100 83C404                  	add esp, 4
   166 00000103 EB1E                    	jmp final
   167                                  
   168                                  	eroare_read:
   169 00000105 68[21000000]            	push eroare_citire
   170 0000010A FF15[00000000]          	call [printf]
   171 00000110 83C404                  	add esp, 4
   172 00000113 EB0E                    	jmp final
   173                                  
   174                                  	eroare_write:
   175 00000115 68[3E000000]            	push eroare_scriere
   176 0000011A FF15[00000000]          	call [printf]
   177 00000120 83C404                  	add esp, 4
   178                                  
   179                                  	final:
   180 00000123 6A00                    	push   dword 0
   181 00000125 FF15[00000000]          	call   [exit]
