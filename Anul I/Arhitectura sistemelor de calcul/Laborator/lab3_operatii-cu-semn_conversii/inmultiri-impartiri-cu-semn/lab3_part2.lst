     1                                  bits 32
     2                                  global  start 
     3                                  
     4                                  extern  exit
     5                                  import  exit msvcrt.dll
     6                                  segment  data use32 class=data
     7 00000000 07                      	a db 7h ; = 7d
     8 00000001 3C                      	b db 3Ch ; = 60d
     9 00000002 0D                      	c db 0Dh ; = 13d
    10 00000003 02                      	d db 2h ; = 2d
    11 00000004 BE02                    	e dw 2BEh ; = 702d
    12 00000006 0000010000000000        	x dq 10000h ; = 65536d
    13 0000000E <res 00000004>          	y resd 1
    14                                  segment  code use32 class=code
    15                                  start: 
    16                                  	; inmultiri/impartiri 23 - ( a * b - 2 * c * d) / ( c - e) + x / a = 9362d = 2492h
    17                                  	; a,b,c,d - byte; e - word; x - qword
    18 00000000 A0[00000000]            	mov al, [a]
    19 00000005 F62D[01000000]          	imul byte [b] ; AX = a*b
    20 0000000B 98                      	cwde ; EAX = a*b
    21 0000000C 89C3                    	mov ebx, eax
    22 0000000E B002                    	mov al, 2h
    23 00000010 F62D[02000000]          	imul byte [c] ; AX = 2*c
    24 00000016 6689C2                  	mov dx, ax
    25 00000019 A0[03000000]            	mov al, [d]
    26 0000001E 6698                    	cbw ; AX = d
    27 00000020 66F7EA                  	imul dx ; DX:AX = 2*c*d
    28 00000023 6652                    	push dx
    29 00000025 6650                    	push ax
    30 00000027 5A                      	pop edx ; EDX = 2*c*d
    31 00000028 29D3                    	sub ebx, edx ; EBX = a*b - 2*c*d
    32 0000002A 53                      	push ebx
    33 0000002B 6658                    	pop ax
    34 0000002D 665A                    	pop dx ; DX:AX = a*b - 2*c*d = 0000:0170h
    35 0000002F 6689C3                  	mov bx, ax
    36 00000032 A0[02000000]            	mov al, [c]
    37 00000037 6698                    	cbw
    38 00000039 662B05[04000000]        	sub ax, [e]
    39 00000040 6689C1                  	mov cx, ax ; CX = c-e
    40 00000043 6689D8                  	mov ax, bx
    41 00000046 66F7F9                  	idiv cx ; AX = DX:AX/CX = ( a * b - 2 * c * d) / ( c - e), DX = DX:AX%CX
    42 00000049 6689C1                  	mov cx, ax
    43 0000004C A1[06000000]            	mov eax, dword [x+0]
    44 00000051 8B15[0A000000]          	mov edx, dword [x+4] ; EDX:EAX = x = 00000000:00010000h
    45 00000057 89C3                    	mov ebx, eax
    46 00000059 A0[00000000]            	mov al, [a]
    47 0000005E 6698                    	cbw
    48 00000060 98                      	cwde
    49 00000061 A3[0E000000]            	mov [y], eax
    50 00000066 89D8                    	mov eax, ebx
    51 00000068 8B1D[0E000000]          	mov ebx, [y]
    52 0000006E F7FB                    	idiv ebx ; AX = EDX:EAX/EBX = x / a
    53 00000070 6601C8                  	add ax, cx ;  rezultatul este in AX = 2492h
    54                                  	
    55 00000073 6A00                    	push   dword 0
    56 00000075 FF15[00000000]          	call   [exit]
